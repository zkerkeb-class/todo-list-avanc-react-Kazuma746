{"ast":null,"code":"var _jsxFileName = \"/Users/perfecto/Documents/Ynov/Year2/devCloud/boilerplate/src/App.js\",\n  _s = $RefreshSig$();\n// Importation des modules React et du hook `useState`\nimport React, { useState } from 'react';\n\n// Composant principal de notre application\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialisation de l'état `tasks`, qui est un tableau vide au départ pour stocker les tâches\n  const [tasks, setTasks] = useState([]);\n\n  // Initialisation de l'état `taskText`, qui garde le texte saisi dans l'input pour la nouvelle tâche\n  const [taskText, setTaskText] = useState('');\n\n  // Fonction pour ajouter une tâche à la liste\n  const addTask = () => {\n    // Crée un nouvel objet tâche avec un ID unique, le texte saisi, et un statut de complétion à `false`\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      completed: false\n    };\n\n    // Met à jour l'état `tasks` en ajoutant la nouvelle tâche à la liste existante\n    setTasks([...tasks, newTask]);\n\n    // Réinitialise le champ de texte pour que l’utilisateur puisse ajouter une nouvelle tâche\n    setTaskText('');\n  };\n\n  // Fonction pour basculer l'état de complétion d'une tâche\n  const toggleTask = id => {\n    // Met à jour l'état `tasks` en changeant la propriété `completed` de la tâche spécifiée par `id`\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n\n  // Fonction pour supprimer une tâche de la liste\n  const removeTask = id => {\n    // Met à jour `tasks` en filtrant et supprimant la tâche avec l'ID spécifié\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  // Interface utilisateur de l'application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ma Liste de T\\xE2ches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      // Associe la valeur de l'input à l'état `taskText`\n      value: taskText\n      // Met à jour `taskText` lorsque l'utilisateur saisit du texte\n      ,\n      onChange: e => setTaskText(e.target.value)\n      // Placeholder pour guider l'utilisateur sur ce qu'il peut faire ici\n      ,\n      placeholder: \"Nouvelle t\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Ajouter T\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: task.completed ? 'line-through' : 'none'\n          },\n          children: task.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleTask(task.id),\n          children: task.completed ? 'Annuler' : 'Terminer'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => removeTask(task.id),\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n// Exportation du composant pour pouvoir l'utiliser dans d'autres fichiers\n_s(App, \"KONwTDVQjLWdQnbWPpoW0A2OEy8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","taskText","setTaskText","addTask","newTask","id","Date","now","text","completed","toggleTask","map","task","removeTask","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","style","textDecoration","_c","$RefreshReg$"],"sources":["/Users/perfecto/Documents/Ynov/Year2/devCloud/boilerplate/src/App.js"],"sourcesContent":["// Importation des modules React et du hook `useState`\nimport React, { useState } from 'react';\n\n// Composant principal de notre application\nfunction App() {\n  // Initialisation de l'état `tasks`, qui est un tableau vide au départ pour stocker les tâches\n  const [tasks, setTasks] = useState([]);\n\n  // Initialisation de l'état `taskText`, qui garde le texte saisi dans l'input pour la nouvelle tâche\n  const [taskText, setTaskText] = useState('');\n\n  // Fonction pour ajouter une tâche à la liste\n  const addTask = () => {\n    // Crée un nouvel objet tâche avec un ID unique, le texte saisi, et un statut de complétion à `false`\n    const newTask = { id: Date.now(), text: taskText, completed: false };\n    \n    // Met à jour l'état `tasks` en ajoutant la nouvelle tâche à la liste existante\n    setTasks([...tasks, newTask]);\n    \n    // Réinitialise le champ de texte pour que l’utilisateur puisse ajouter une nouvelle tâche\n    setTaskText('');\n  };\n\n  // Fonction pour basculer l'état de complétion d'une tâche\n  const toggleTask = (id) => {\n    // Met à jour l'état `tasks` en changeant la propriété `completed` de la tâche spécifiée par `id`\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  // Fonction pour supprimer une tâche de la liste\n  const removeTask = (id) => {\n    // Met à jour `tasks` en filtrant et supprimant la tâche avec l'ID spécifié\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  // Interface utilisateur de l'application\n  return (\n    <div className=\"App\">\n      {/* Titre de l'application */}\n      <h1>Ma Liste de Tâches</h1>\n\n      {/* Champ de saisie pour la nouvelle tâche */}\n      <input\n        // Associe la valeur de l'input à l'état `taskText`\n        value={taskText}\n        // Met à jour `taskText` lorsque l'utilisateur saisit du texte\n        onChange={(e) => setTaskText(e.target.value)}\n        // Placeholder pour guider l'utilisateur sur ce qu'il peut faire ici\n        placeholder=\"Nouvelle tâche\"\n      />\n\n      {/* Bouton pour ajouter la tâche avec un appel à la fonction `addTask` */}\n      <button onClick={addTask}>Ajouter Tâche</button>\n\n      {/* Liste des tâches affichée sous forme de liste non ordonnée */}\n      <ul>\n        {/* Itère sur chaque tâche de `tasks` pour créer un élément de liste */}\n        {tasks.map((task) => (\n          <li key={task.id}>\n            {/* Affiche le texte de la tâche, avec un style barré si la tâche est terminée */}\n            <span style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>\n              {task.text}\n            </span>\n\n            {/* Bouton pour marquer la tâche comme terminée/non terminée */}\n            <button onClick={() => toggleTask(task.id)}>\n              {task.completed ? 'Annuler' : 'Terminer'}\n            </button>\n\n            {/* Bouton pour supprimer la tâche de la liste */}\n            <button onClick={() => removeTask(task.id)}>Supprimer</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Exportation du composant pour pouvoir l'utiliser dans d'autres fichiers\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}